---
title: ".bashrc and aliases"
teaching: 0
exercises: 0
questions:
- "How do I use modify the .bashrc file?"
objectives:
- "Customize your bash experience."
- "Define aliases to save you time and typing."
keypoints:
- "Unix shells can be launched in a customized way with the user's preferences."
- "Aliases can be defined that substitute short strings for long or complex commands."

---
### .bashrc

The bash shell allows for a great deal of customization including defining shortcuts for frequently used commands. 
Such preferences are defined in a file in your home directory called `.bashrc`, which is a shell script.
Itâ€™s used to save and load your terminal preferences and environmental variables.
In order to load your preferences, bash runs the contents of the `.bashrc` file at each launch. 

Some applications will modify your `.bashrc` file when they are installed or initiated. 
For instance, if you use Anaconda to manage the installation of personal Python or R libraries on your COLA account, 
it will add some scripting code to your `.bashrc` file so that it starts up properly when you login.

Let's take a look at the contents of your `.bashrc` file. Go to your home directory...

~~~
$ cd
$ ls -l .bashrc
-rw------- 1 jdoe123 users 520 Aug 21 13:16 .bashrc
~~~
{: .language-bash}

You will see something like the result above. 
A bit about the information shown when you perform a *verbose* file listing (i.e., using the `-l` option):
* The first ten characters tell you about the nature and permissions of object listed. Permissions are defined at three levels.
  * First character tells what the object is.
    * `-` means it is a file
    * `d` is a directory
    * `l` is a link
    * There are other possibilities here, but these 3 are the most likely ones you will encounter.
  * The next 9 characters are 3 sets of 3 that each have the sequence `rwx` and describe the permissions.
    * `r` means *readable* (its contents can be viewed)
    * `w` means *writable* (its contents can be edited and changed)
    * `x` means *executable* (it can be run on the computer)
    * '-' means it is _not_ whichever above.
  * The 3 sets of 3 are, in order from left to right:
    * The permissions for the user that owns the file (who created it, or this case ownership was assigned when the account was created).
    * The permissions for any member of the "group" that owns the file (the user is a member of this group).
    * The permissions for anyone who has an account on this computer.
  * In this example, `-rw-------` means this is a _file_ that only the reader can read and write. No one else would be able to view or change the contents of this file.
  A user can change the permissions of any file or directory they own.
* `1` tells the number of disk blocks occupied, largely irrelevant but can be a useful cue on directories as an indicator of how much data is stored there.
* `jdoe123` is the username of the owner. This is the person who can change file permissions.
* `users` is the group name. A user may belong to multiple groups (e.g., different groups can be set up for different projects with different members), but a directory or file can only be owned by one group, just as it can only be owned by one user.
* `520` is the size of the file in bytes.
* `Aug 21 13:16` is the time the file was altered and saved. After about 6 months without any changes, the timestamp disappears and is replaced by the year.
* `.bashrc` is the file name.

Note that files with names starting with a period are usually system files and are, by default, "hidden". They will not show up with a generic `ls` command unless the `-a` option is used or the file is explicitly named as we did above.



`ls` means list the contents of the current directory.
~~~
$ ls
~~~
{: .language-bash}

~~~
$ ls -F /
~~~
{: .language-bash}


`ls` is the **command**, with an **option** `-F` (also called **switches** or **flags**) and an **argument** `/`.

Unix commands have many **options** that are very useful.  Let's look at some for `ls`

> ## Exploring More `ls` Flags
>
> You can also use two options at the same time. What does the command `ls` do when used
> with the `-l` option? What about if you use both the `-l` and the `-h` option?
>
> Some of its output is about properties that we do not cover in this lesson (such
> as file permissions and ownership), but the rest should be useful
> nevertheless.
>
> > ## Solution
> > The `-l` option makes `ls` use a **l**ong listing format, showing not only
> > the file/directory names but also additional information such as the file size
> > and the time of its last modification. If you use both the `-h` option and the `-l` option,
> > this makes the file size '**h**uman readable', i.e. displaying something like `5.3K`
> > instead of `5369`.
> {: .solution}
{: .challenge}

> ## Listing in Reverse Chronological Order
>
> By default `ls` lists the contents of a directory in alphabetical
> order by name. The command `ls -t` lists items by time of last
> change instead of alphabetically. The command `ls -r` lists the
> contents of a directory in reverse order.
> Which file is displayed last when you combine the `-t` and `-r` flags?
> Hint: You may need to use the `-l` flag to see the
> last changed dates.
>
> > ## Solution
> > The most recently changed file is listed last when using `-rt`. This
> > can be very useful for finding your most recent edits or checking to
> > see if a new output file was written.
> {: .solution}
{: .challenge}

### Getting help

`ls` has lots of other **options**. There are two common ways to find out how
to use a command and what options it accepts:

1. We can pass a `--help` option to the command, such as:
    ~~~
    $ ls --help
    ~~~
    {: .language-bash}

2. We can read its manual page with `man`, such as:
    ~~~
    $ man ls
    ~~~
    {: .language-bash}

3. Alternatively, Linux systems and many Unix systems have a differently-formatted manual invoked with `info`, such as:
    ~~~
    $ info ls
    ~~~
    {: .language-bash}

### More about options in Unix commands

You may have noticed that there may be single-dash options, e.g., `ls -F`
and double-dash options, e.g., `ls --help`.
You will usually see both kinds listed when you get help for a command. 

Single-dash options are always single characters, and they can be chained together, e.g.: `ls -asr` is the same as `ls -a -s -r`. 

Double-dash options are longer strings, usually in "plain English", and must be listed separately, 
e.g.: `ls --all --size --reverse`. 

Usually the order doesn't matter - but check the documentation if things do not behave the way you expect.

Some options have both forms, some have one or the other. Single-dash options are the original approach from the early days of Unix, but restricts the number of options that can be defined, so double-dash was developed to allow for limitless options.

Finally, some options take arguments, e.g.: `ls --color=always`, which prints the names of files and directories in different colors depending on their types. Again, see documentation for valid choices.
